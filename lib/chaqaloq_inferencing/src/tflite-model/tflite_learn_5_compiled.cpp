/*
 * Copyright (c) 2025 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://edgeimpulse.com/legal/terms-of-service) or Enterprise Terms of
 * Service (https://edgeimpulse.com/legal/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 05.08.2025 09:59:18

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 8
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 21760;
#else
constexpr int kTensorArenaSize = 20736;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<2, int> tensor_dimension0 = { 2, { 1,1950 } };
const TfArray<1, float> quant0_scale = { 1, { 0.045019719749689102, } };
const TfArray<1, int> quant0_zero = { 1, { -25 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data1[4] = { 1, 150, 13, 1, };
const TfArray<1, int> tensor_dimension1 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(8) int32_t tensor_data2[2] = { -1, 2432, };
const TfArray<1, int> tensor_dimension2 = { 1, { 2 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(8) int32_t tensor_data3[2] = { -468, 468, };
const TfArray<1, float> quant3_scale = { 1, { 1.8231488866149448e-05, } };
const TfArray<1, int> quant3_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data4[2*2432] = { 
  -4, -5, 8, 51, 9, 3, 16, -31, -32, 3, 8, -34, 29, 9, -19, 46, 14, -4, 53, -16, -42, 21, -32, 21, 39, -14, -19, 3, 27, -7, 51, 20, 4, 21, 29, 27, 8, -15, 16, -22, 4, 2, -28, 44, 80, 81, -26, 9, 24, 24, 33, -25, 12, 33, 76, -26, -15, 3, 35, -11, 29, -13, -19, 57, -19, 0, -24, 45, -20, -15, 28, 0, -12, 25, -11, 1, -25, -18, -16, 23, 13, 0, -3, 8, -53, -19, -2, -15, 10, -38, -19, 11, 16, -43, -29, -3, 17, 36, 31, 10, 5, -8, 29, 23, 19, -26, -31, 25, 52, 54, 7, -3, -37, -8, 14, 15, 8, 23, -6, -5, -14, 39, -50, 4, 77, 18, 65, 4, -35, -39, -54, 43, 7, -29, 59, -39, -32, 4, -25, -46, 39, -12, -85, 65, -2, -36, 45, 27, -34, 5, -21, 28, -2, -47, -43, -14, -14, -34, 14, -23, -12, 21, 23, 23, 14, -10, -22, 17, 30, -19, 11, 40, 27, 18, 38, -36, 20, -5, 7, 63, 12, -2, 21, -31, 31, 2, -19, 40, 43, 56, -63, -40, -23, 22, -12, 21, 41, -31, 35, -15, -11, 20, -20, -19, 39, 26, -43, 61, 1, -17, 59, 1, -70, 20, -45, -4, -7, -27, -42, 20, 21, -28, 31, 9, 9, 21, 11, 40, 33, -13, 4, 22, 21, -8, -11, 21, 90, 81, -22, -22, 28, -46, 4, 73, 14, 26, -20, -26, 52, 22, -34, 6, -24, 51, 1, 16, -38, 40, -5, 29, -14, 10, 57, -13, -4, 26, -1, 77, 3, 34, -9, 6, 21, -18, 68, 11, -40, -12, -30, -10, -14, -70, -44, -37, 21, -15, 33, 20, 30, 18, 6, 11, -18, -6, 2, 6, -9, -8, 38, 58, 60, 87, -11, -2, 0, 35, 45, 23, -22, 41, 28, -27, -17, 51, 24, -19, 127, -3, 6, -2, -14, -15, -16, 41, -30, -41, 54, -50, -23, 5, -33, -35, 7, 8, -14, 38, -12, 10, 35, 12, 20, -4, 10, -12, -17, -22, -21, -28, 12, -10, -13, -42, -9, 22, 20, 4, -11, -27, -6, 11, -23, -14, -19, -8, 51, 67, 35, -12, -4, -39, -41, 55, -62, -2, -28, -16, 26, 22, 0, -2, 84, -13, -31, 22, -28, -78, -25, 58, 22, -62, 23, -52, 29, -1, -64, -28, 22, 31, -48, 42, 3, -7, 23, 28, -78, 16, 6, 4, -3, -51, 13, 18, -14, -17, 1, -51, -4, 15, 13, 11, 34, 17, 3, -15, 29, 2, 25, -12, 49, 14, 3, -28, -1, -9, -1, 90, 9, -30, 17, -50, 44, 24, 9, 54, -20, -3, -86, -6, -1, -5, -16, 53, -27, 21, 38, 14, -39, 20, -19, 25, 2, 34, 2, 8, 17, -22, 40, -23, -79, 13, -54, -17, -14, -22, -22, 1, -41, -62, 9, 8, 11, 12, 26, 45, 42, 16, -3, -10, 20, -24, 1, 25, 105, 46, 9, -5, -28, -38, -22, 61, -31, 9, -17, -11, 21, -6, -18, 27, -42, -39, -51, 19, -20, 22, -37, 61, 2, -47, 25, -52, 28, -21, -42, 28, -8, 2, -21, 27, 35, 15, 47, -22, -91, -33, -23, -30, -7, -48, -42, -11, -22, -21, 16, -13, 6, 16, -7, 9, -9, -25, -5, -11, -11, 0, -13, 47, 86, 47, 9, 35, 13, 5, 17, 41, 41, -6, 54, -41, 2, 32, -43, 6, 34, 56, 26, 19, -43, -45, -29, 68, -23, -20, 13, -42, -14, 7, -30, -15, 0, 7, -11, 22, 5, 13, 36, 22, -18, -11, 25, 4, 9, -30, -34, 17, -10, -21, 15, -12, -18, -4, 6, 25, -25, -25, 9, -46, -8, -13, -39, 6, 34, 36, -20, 7, 8, -15, -50, 33, 11, 22, -9, 15, 17, 20, -4, 3, 49, 9, 43, 43, -47, -30, -62, 19, 0, -21, 39, -46, -31, 29, -10, -24, 41, 7, -3, 21, -14, -4, 41, 22, -77, 8, 17, -15, 40, -66, -10, 30, -34, -52, -11, -24, -29, -9, 7, 11, 20, 8, 20, -34, 5, 1, 2, -17, 48, 39, -39, 3, -13, -31, -24, 56, 16, 34, -6, -15, 52, 15, -9, 25, 2, 4, -74, 31, 6, 16, -3, 31, -23, -22, 31, 1, -45, 4, -18, -18, 7, 36, -15, 36, 33, 10, 25, -16, -33, -8, -53, -21, -12, -10, 9, -40, -20, -81, 28, 11, -6, 4, 19, 17, 23, 0, 18, 26, -3, -25, -18, 29, 49, 30, 16, -50, -9, 0, -7, 25, 11, -8, -15, 44, 17, 28, -6, 11, -102, 19, 11, 3, -7, -29, -18, 25, 4, -12, 24, 8, -4, 16, -24, 9, -25, 4, 3, 1, 25, 12, 49, -31, -61, -28, 10, -10, -5, -44, -35, -23, -16, -36, 43, -16, 0, 38, 2, 30, -40, -22, -37, -13, -12, -53, -47, 43, 84, 60, 25, 18, 26, 8, -19, 19, 24, -4, 33, -13, 42, 39, -25, 36, 15, 0, 43, -11, 9, -41, -45, 68, -41, -60, 18, -31, -26, -2, -26, -36, 44, 5, -56, 40, -2, 0, 24, 35, 34, -20, 18, 4, 49, -8, -45, 42, -34, -32, -6, -5, -11, -30, -23, 17, 27, -18, -15, -14, 28, -4, -4, -3, 43, 29, -43, 23, -28, -13, -13, 41, 23, 9, 20, 10, 40, 18, 17, -12, 19, -7, -10, 1, -23, -38, -63, 28, 47, -19, 60, -11, -24, 58, -40, -38, 47, 21, -29, 40, 32, -14, 13, -6, -28, -11, 23, -4, 37, 23, 8, 22, -10, -36, -21, -20, -7, 36, -14, 32, -13, -34, -3, -4, -12, -28, -4, -13, 63, 40, -4, -14, 1, -10, 9, 46, -10, 13, -5, 1, 39, 0, -10, 26, -42, -19, -45, 21, -45, -15, -54, 13, -6, -16, 20, -13, -22, 12, -43, -25, 22, 10, 4, -36, 22, -14, 35, -30, -53, -37, -8, -31, -14, -40, -37, -43, 32, -33, 56, -15, 17, -3, 18, -2, -33, -18, -15, -10, 25, -29, -24, 24, 52, 57, 2, 6, -2, -4, -7, 21, 43, 28, 60, -8, -4, 0, 0, 11, -44, 29, -22, -9, -22, -36, 7, 27, -40, -27, 5, -5, 3, 4, -13, 18, 12, -33, -19, -9, -16, 43, 31, -16, -32, -21, -48, 20, 9, -38, -49, -8, 16, -5, -19, -27, -18, -27, 9, 31, -8, -3, -10, -9, 17, -6, -71, 7, 32, 51, 16, 6, 2, -20, -17, -15, -5, 19, -5, -5, 27, 23, 5, -36, 68, -19, 24, 20, -28, -37, -20, 59, 18, -48, 57, -59, -15, 0, 11, 9, 31, 22, -38, 35, 4, -6, 14, 38, 14, -15, -17, 20, 20, -12, -57, 6, -15, -29, 6, 2, -35, -39, -14, -11, -31, -39, -35, -39, -12, -18, 27, 14, 34, 14, -17, 25, -27, -50, 2, 61, 30, 26, 24, -28, 63, -8, 11, 19, 7, -13, -30, 46, -66, 27, -31, 29, 7, -32, 29, -41, 16, 12, -16, 34, 5, 25, -34, 1, 31, -30, 35, -8, -35, -32, -23, -9, 24, -15, -34, 9, 21, -31, -23, -3, -21, 8, 11, 1, 10, 1, 3, -16, 16, -25, -16, 26, 38, 32, -50, 1, 4, -50, 22, 15, -17, -4, 23, -4, -1, 12, -82, 20, -29, -3, -65, 20, -35, 12, -42, 13, -32, -23, 16, 8, 16, 7, -20, 19, -23, 17, 3, -5, 9, -4, 54, -58, -46, -10, -32, -8, -23, -57, -29, -34, -3, -36, 19, 18, -8, -4, -11, 14, 18, -13, -15, -10, 35, -5, -18, 43, 50, 38, -4, 27, -31, -9, 18, 18, -8, 61, 31, 8, -26, 40, 36, -17, 4, -33, 49, -17, -37, -15, -45, 44, -31, -60, 12, -62, 2, 7, -36, -14, -2, -6, -57, 12, 10, 27, 12, -41, -40, -9, -27, -9, 20, -57, -30, 55, -13, -63, 7, -56, -16, 7, 17, 34, -40, -41, -32, -14, 10, -15, -5, -22, 75, 14, -7, -20, 10, -9, 12, 41, -43, -27, -1, 4, 17, 27, -7, -21, 35, -5, -12, 46, -58, -31, -48, 33, -36, -64, 78, -66, -29, -28, 16, -28, 34, 29, -58, 1, 11, 9, 33, 39, -15, -8, -9, 8, 3, -11, -2, 36, -23, -41, -29, -14, -13, 20, -17, 15, 29, -28, -18, -12, -17, -5, 1, 20, 69, 31, 11, 35, -2, -26, 7, 77, 18, 29, -20, -29, 33, 29, 15, 24, 18, -2, 12, 6, -18, 1, -26, 18, -25, -30, 10, -63, -30, -40, -62, 2, -13, 30, 9, -19, 10, -23, 12, -27, 39, -3, -38, -28, -8, -32, -30, -22, -8, -27, 48, -1, 26, 6, -4, 13, -20, -17, -28, 1, 47, -25, -13, 48, 9, 47, -22, -25, -12, -46, 43, 22, -9, 32, 40, 6, 16, 20, -14, 9, -31, -28, 20, 29, -36, -20, -32, 12, -77, -65, 5, -14, -36, -30, -4, 19, 7, 20, 20, -33, 24, -2, 12, -32, -35, -17, -11, 3, -9, -31, 5, 11, 23, -21, -18, -11, 12, -4, -12, 32, -5, -40, 7, -24, 30, -49, -10, 20, 7, 7, -3, -11, 31, -1, 35, -5, 106, 1, -1, -7, 18, -19, 20, 6, 70, -25, -8, -6, -19, -61, -30, 16, -38, -34, 33, -7, -41, -26, 9, -43, 4, -7, 5, 0, -7, -11, 32, -15, -11, -14, -13, 16, -9, 13, -66, -13, -19, -49, 8, -24, -31, -28, -7, 12, -4, -38, -26, -28, -2, -40, -14, -34, 19, 47, -25, 3, -5, 17, 7, 65, -68, -12, -18, -25, 13, -8, -7, -2, 24, -28, 10, 71, -59, -14, -37, 52, -27, -76, 60, -71, -32, 26, -2, 6, 24, 24, -26, 54, 1, 36, 12, 14, -35, -8, 13, -31, 44, -11, -8, 45, -40, -32, -7, -39, -21, -5, -2, -20, 10, -15, 16, 8, 5, -23, 16, -9, 75, 48, 21, -4, 11, -29, 2, 67, 32, 32, 15, -21, -1, 24, 17, 36, -6, 72, -33, 50, -21, -14, -34, 52, -42, -45, -8, -42, -37, -7, -20, -25, 14, 38, -32, -10, 12, -54, 6, -32, -27, -19, 1, -21, -29, -5, -32, -4, -14, -1, 29, -17, -11, 29, -23, 13, 9, 16, -4, 17, 29, 4, 9, 79, 96, 45, -29, 27, -28, 0, 36, 71, 24, 19, 81, 25, 18, 53, -4, 21, 21, -23, 45, 7, -29, -54, -48, 1, -37, -18, 13, -72, -56, -19, -53, -63, -8, -24, -61, -18, -5, 40, 32, -2, -34, -20, -8, 12, -5, -7, -42, -19, 14, 9, -4, 1, 1, -23, -31, 13, -5, -11, -7, -3, 30, 13, 4, 46, 65, 36, -3, 1, 0, 6, 7, 18, 82, -4, 22, 5, 18, 37, 9, 38, 94, 49, -41, 34, -31, -19, -54, 33, 2, -54, 50, -50, -27, -38, -7, -1, 14, 17, -32, 27, -6, 19, 13, -7, 17, -35, 27, -30, -7, -22, -37, 21, -8, -43, 20, 5, -3, -24, -20, 7, 16, -28, -23, 8, 22, 40, -21, 17, 29, 42, -7, -19, 9, -21, -12, 34, 49, -21, -30, -10, 5, 100, 50, -16, 50, 25, -13, 47, -24, 24, -18, 51, -30, -28, 28, -51, -11, 9, -24, 28, 6, 14, -37, 37, 25, -6, 31, 2, 4, -27, 39, 9, 20, 2, -13, 37, -1, -10, -26, -17, -29, 23, -13, 13, 0, -3, -28, -2, -14, -1, 8, -10, 67, 19, -21, 60, 14, -51, 27, 46, 1, 17, 34, 33, 35, 54, 32, -2, -45, 22, -32, 43, -36, 2, -40, 19, -65, -45, 23, -54, -11, 7, -22, -51, -19, 0, -25, -25, -8, -46, -46, -58, 10, -5, -29, -18, -41, -22, -39, -42, -19, -8, -5, -4, -15, -3, 5, 8, 22, -12, -23, 12, 15, -26, -2, 34, 36, 37, -30, -36, 3, 3, 5, 38, -32, 14, 75, -18, 14, 19, 17, 16, 19, -43, -57, 43, -32, -31, -23, 2, -23, -16, 32, -55, -32, -9, -4, -44, 4, -10, -24, 27, 35, 8, 23, -35, -14, -9, -5, 14, -2, 32, -38, -23, -34, -11, -3, -29, -12, -7, -7, 31, 24, 24, -22, 6, 33, 34, -50, 27, 16, 26, -4, 7, 3, 1, 13, 51, 30, 16, 7, -26, -1, 50, 38, -18, 84, 25, -4, 73, -20, 3, -20, 9, 15, 16, 30, 7, 10, -2, 16, 51, 9, 13, 2, 12, 14, -14, 20, -31, -1, 22, -30, 6, 0, 2, -21, -41, -24, -27, 16, -33, -2, -8, -9, 26, 9, -16, 26, -15, 36, 18, 2, 11, 33, 53, 2, 28, -15, 18, -21, 60, 52, -5, 24, 14, 5, 59, 24, -21, -17, 37, -10, 59, -31, -9, -25, 65, -6, -19, 19, 21, 6, -38, -17, 20, 20, 27, -6, 53, 26, -26, 34, -26, 41, 0, 13, -17, -13, 8, -3, -16, -15, -22, -26, 30, -31, 11, 14, 105, -9, -22, 7, 19, 26, -20, -27, -7, 78, 43, -17, 19, 29, -41, -34, -10, 53, 35, 47, 4, -8, 91, -12, 33, 47, 17, -45, 95, -62, 22, -34, 32, -19, -54, 43, -28, 7, 52, 21, -17, 22, 41, -25, 14, 22, 11, 34, -1, 9, 24, -25, 13, -15, 8, 8, -32, 35, -26, -6, -14, -25, 12, 30, 27, -23, -18, 33, 1, 33, 6, 1, 34, 5, 65, -7, -5, -26, 7, -11, -23, -12, 3, 61, -39, -7, 24, 63, -30, 7, -10, 2, 63, -7, 27, -11, 15, -62, -34, 57, -51, 16, -23, -14, -30, -2, -17, -2, 27, 14, 24, 24, -6, -32, -14, -33, 22, 14, -22, -32, 22, -24, -14, 29, 17, -13, -8, -20, 69, 57, -14, -38, -26, -2, 11, -17, 60, 36, 35, -14, -21, -4, -25, 24, 2, 117, 10, 29, -7, 32, 19, 20, -5, 37, 17, -26, 12, 25, 6, 10, 22, -8, -14, 38, 10, -25, 4, 23, -17, 1, 6, 10, -14, 1, 26, 28, -24, 1, 16, 23, -6, 27, -9, 6, -28, -34, -18, -6, 9, -21, 13, -15, 45, 3, -36, 13, -17, 32, 11, 42, 5, 74, 67, 24, 19, -12, -2, 1, -7, 32, 36, -2, -30, 23, 28, 1, 33, 21, 8, -4, 40, -1, 5, 16, 30, -3, 34, 13, 23, 25, 29, -17, 53, -4, 32, 13, 40, -5, 18, 31, 19, -26, 18, -15, 14, 6, -30, 24, -15, 11, -47, -3, 32, 4, 4, -13, 47, 24, -8, 31, -8, 40, -11, -28, 22, 75, 74, -9, 3, -36, -96, 1, 72, -55, 45, 2, -11, -4, -8, 33, 29, -55, -2, -75, 60, 
  29, -11, 1, -36, -4, -17, -45, 22, 16, 19, -44, 7, -49, 28, 20, -41, 0, -3, -40, -19, 70, -17, 36, -2, -35, -6, 35, -12, -20, 34, -60, 19, 3, 3, -14, -54, -20, -26, 5, 57, -14, 33, 6, -46, -92, -57, 6, -16, -5, -38, -25, -9, -3, -36, -45, 6, 3, -40, -3, 28, -38, -2, -9, -65, 25, 6, 25, -41, 11, 22, -50, -4, 20, -22, -9, -26, 6, 14, 19, -30, -25, -7, -7, -5, 51, 2, 19, 14, -18, 42, 29, -2, -21, 29, -3, 8, 5, -14, -1, -12, 20, 13, -27, -9, -33, 47, 6, -9, -74, -64, -11, -14, 33, 28, -22, 7, 21, -28, 7, -36, -3, -73, 52, 9, -56, -42, -33, -28, 25, 49, 36, -30, -4, 48, -38, 23, 9, 1, 22, 64, -14, 16, 63, -54, -17, 16, -56, -3, 44, 27, -7, -10, 9, 22, 60, 5, 17, 41, -35, 1, -6, -26, -30, -13, -31, -7, 40, 18, -41, 23, -37, -26, -25, -24, -19, 27, 7, 0, 22, -51, -1, 4, -26, 24, -43, -39, 10, -60, -49, -48, 30, 0, 22, -25, 28, -48, -18, 22, -28, 7, 2, -30, 31, -8, -36, -60, 28, -61, -18, 27, -43, 30, 47, -6, 28, -1, -13, 38, 33, -13, 5, 53, -25, -9, -5, 0, -2, -72, -44, -17, 20, -33, -10, 5, 12, -61, -92, -72, 3, 32, -5, 43, 16, -98, 16, -16, 29, 22, -51, -1, 33, -22, 8, -36, -13, -42, 42, -24, 29, -36, -18, 20, -77, 20, 3, -20, -29, -56, 24, -19, 18, -37, -13, 24, -56, 1, 44, 13, 26, 18, 11, 61, 12, 54, -10, 18, -31, 10, -18, 23, -24, -28, 40, -6, 32, 19, 9, 6, 1, -21, -74, -58, 7, 19, -4, -24, -32, -43, 27, -21, -21, 8, 30, -88, -47, -13, -83, -12, 13, -25, 22, -28, 29, -63, 46, 51, -43, 45, 12, 3, 27, 49, 14, -7, 21, -28, -25, -12, -22, -10, 8, 9, 1, -10, 13, 46, 2, 1, 27, 44, -3, 40, 32, 13, -2, -2, -6, 22, -4, -20, 19, 29, 49, 1, -75, -51, -16, 1, 4, 40, 63, -58, 43, 17, 30, 20, 5, 11, 39, 19, -105, -7, 29, -34, 44, 58, 22, -64, 6, 59, -60, 50, -32, 3, 49, 53, -36, -27, 72, -43, -10, 30, -26, -35, 38, -7, 1, -17, -14, 33, 10, -18, 18, 0, 6, 19, -1, -12, -36, -51, -37, -52, 12, 0, -37, -8, -17, 15, -65, -40, -1, 22, -12, 3, 8, -65, -39, 5, -52, 19, -73, -35, -4, -39, 26, -17, 50, 7, 1, -31, 16, -47, 22, -19, -51, 13, 24, -19, 25, -30, -8, -52, -8, -14, -20, 19, -18, 21, 76, 26, 50, 2, -18, 25, 11, -2, 25, 39, -3, 21, 12, -35, 12, -48, -38, -8, 26, 20, -32, 22, 14, -17, -98, -57, 30, -10, -3, 14, 24, -48, 4, -7, 10, 36, -37, 34, -3, -25, 58, 20, 17, -6, 10, -4, 37, -27, 10, 20, -44, 45, -11, 29, 37, -21, -7, 18, 11, -8, -54, -18, -30, 26, 93, 31, 60, 30, 41, 42, 78, -1, 3, -1, -27, -9, 11, -33, 20, -17, 31, 26, 13, 5, -12, 21, 23, -21, -61, -47, 0, -18, -14, -32, -5, -38, -24, 22, -51, 7, 13, -13, 6, -5, -5, -48, -37, 1, 25, 21, 49, -75, 22, 19, -34, 23, -20, -16, 10, -20, -9, -16, 20, -34, -16, -30, -23, -11, -7, 24, 1, -15, -17, 8, 31, -22, -18, 21, 8, -3, -2, 3, -10, -27, 40, 25, 26, 15, -20, 4, 55, -11, -5, -29, 50, 11, -5, 14, 50, -50, -11, -13, -19, 4, -14, 5, 13, -2, -65, -7, -48, -10, 61, 11, 51, -37, -18, 45, -33, 10, 20, -16, 44, 10, -32, -24, 32, -14, 5, -12, -41, 8, 95, -8, -24, -14, -63, 57, 19, -28, 26, 22, -11, 10, 9, -8, 9, -20, 9, 5, -16, 25, -14, -15, -25, -2, -82, -15, 35, 10, -4, -2, 20, -51, -9, -42, 35, 11, -26, -10, -6, -15, 15, -4, 86, -13, 7, -33, 16, -44, 30, 15, -9, -2, 47, -18, 22, 15, 9, -14, 46, 0, -23, 29, -33, 14, 43, 6, 21, 22, -1, -4, 0, 41, -5, 49, -33, -9, 23, -9, -28, 7, -22, -14, -7, -7, -22, 23, -4, -58, -57, -53, 25, 22, 16, 23, -1, -26, -24, -17, 21, -19, -25, -10, 16, -1, 86, 12, -18, -3, -15, 36, 61, -30, 20, -6, -30, 13, 33, -36, 14, -5, 3, -34, 19, 9, 2, -35, -33, 15, 74, 15, 10, 6, 11, 74, -1, 16, -12, 63, -17, -13, -10, -26, 19, -8, 13, 23, 17, 11, -7, 47, 55, -21, -97, -25, -9, -20, -50, -4, 13, -17, -24, -6, -29, 21, -47, -42, 14, -32, -26, 4, -7, -11, 8, 24, 27, -60, 32, 44, -36, 70, 20, 11, 38, 38, -30, -26, 62, -35, 17, 30, -30, -25, -28, 6, 20, -23, -70, 19, 69, -32, 37, 0, 5, 9, 0, 30, 17, -40, -10, 2, 22, 27, -24, 14, 13, -1, -36, -21, 5, -37, 23, -8, 39, -42, -1, 13, -38, 20, -52, -8, -29, 13, -40, -3, -26, 5, 32, 27, 28, -51, -9, 17, -41, 21, 11, -62, 6, 25, -22, -38, 52, -22, -3, 5, -35, 18, 59, 2, -7, -4, -40, 3, -44, -23, 13, 13, 25, 3, 43, -5, -10, -28, -5, -10, -13, 19, 15, 22, -3, -10, -72, -27, 33, 5, 2, 16, 13, -28, -25, -5, 3, -9, -24, -16, 1, -51, 55, 30, 49, -15, 57, -10, 26, -17, 28, 7, -11, 30, 14, -24, 35, 18, 6, -53, 33, 14, -6, -9, -32, 29, 38, 23, -12, 32, 11, 66, 44, 51, -38, 49, -39, -2, 4, 2, -34, 6, 19, -5, 54, 12, -20, 14, 34, -56, -62, -37, -22, 16, 0, 5, 18, -24, -21, -42, -39, 12, -21, -21, -2, -4, 28, -47, 22, 14, 2, 44, 16, -43, 11, 18, 1, 27, -4, -42, 5, 3, 28, -4, -7, -11, -2, -59, -32, 0, 11, 22, 21, -18, -26, 31, 35, -15, -15, 7, 1, 7, 13, 19, -6, -2, 6, 7, 27, 26, 0, -5, 44, 14, -17, -48, 6, -16, -20, 13, 7, -19, -16, -6, -11, 20, -61, -14, 0, 4, -82, 16, -1, -28, 41, 38, 44, -57, 12, 29, -72, 33, -7, 19, -4, -11, -34, 0, 19, -48, 16, -25, -5, -33, -14, -29, 31, -34, -34, 15, 42, 17, 17, 44, 5, 12, 3, 13, -28, 4, 33, 53, 22, 27, 8, 17, 7, -12, -28, -27, 29, 1, 3, 20, 17, -71, -13, -13, -9, 20, -44, 24, -22, -44, -40, 35, 44, -14, 54, -21, 26, -33, 19, -3, -44, 47, 23, -12, 4, -32, -24, -11, 29, -10, -32, 17, -31, 10, 11, 16, 19, 42, 1, -10, 32, -18, -36, 37, 45, 2, 43, -21, 14, -5, 10, 5, 31, 2, -32, 27, 14, -52, -45, -44, 16, 2, -9, 56, 15, -32, 8, 14, -41, 10, -20, -33, 69, -53, 56, 7, 39, -1, 30, -4, 17, -4, 15, 1, -8, -5, 24, -34, 46, -29, 19, -36, -21, 26, -10, -3, -26, 48, 82, 14, 42, 35, 25, 42, 29, 12, -2, 38, -28, 19, 3, 13, 12, -29, -9, 20, -6, -7, -37, -2, 20, -75, -50, -32, 2, 4, 34, 32, -22, -17, 29, -30, 2, -5, 30, -57, -27, 9, -27, 18, -67, -20, 13, -4, 24, -46, 35, 74, -17, 20, 13, -2, 42, 29, 3, -12, 31, -8, 25, -23, -8, 25, 42, 12, 0, 4, -40, 44, 71, -15, 14, 61, -9, 25, 17, 11, 11, -52, 46, 33, 11, 1, 5, -8, 26, 9, -51, -39, 24, 18, -28, 3, 15, -28, 44, 37, 24, -10, -18, -8, -5, 24, -57, -25, -6, -37, 24, 56, 64, -34, 42, 72, -74, 83, 26, 20, 13, -3, -22, -27, 73, -10, 5, 5, -34, -11, 43, 10, 9, -3, -38, 17, 23, -47, 32, 33, 18, 17, 9, 2, -9, -35, -18, 9, 22, 34, 5, 6, 8, 14, -52, -42, -27, -1, 13, 4, -10, -111, -3, -14, 28, 7, -44, -19, 23, -38, -39, 29, -25, 2, 12, -9, 24, -14, 42, 39, 22, 32, 41, 15, 55, -34, -11, -18, 1, 21, -38, 2, -11, 26, -26, 3, 37, 7, 10, 25, -6, 21, -24, 48, -13, 11, -12, -15, 22, -11, 31, 22, 6, -4, -49, 37, -2, -30, -11, -38, 32, 7, 30, 46, -15, -7, 40, -46, -57, -22, 13, 3, 14, 21, 46, 29, -29, -66, 56, 8, 31, 1, 47, 71, -31, 14, 29, 56, 7, 11, -8, 0, -19, 16, -3, -3, -50, 50, 36, 22, 21, 23, 15, 31, -5, -15, 6, 3, -3, 6, 24, 6, 16, -11, 1, 33, 2, 21, -6, 36, 4, -62, -22, -40, -12, -1, -7, -42, -33, -37, -92, -9, 6, -12, -16, 6, -34, 7, -51, 22, 6, 1, 59, 38, 17, -12, 6, 59, -18, 28, 40, -7, 6, 24, -9, -5, 24, 0, -22, -15, -4, -12, 9, 6, 25, -38, -10, -32, 29, 25, -3, 43, 15, 40, 34, 23, 4, -33, 25, 7, 17, -4, 3, 25, 4, 17, -53, -73, -6, -15, 8, -20, -12, -26, 28, 12, 17, 27, -6, 10, -16, -2, -23, -1, -1, -41, 46, 17, 39, -48, 25, 71, -36, 50, 17, -21, -18, -23, -27, -10, 23, -31, -28, -1, -9, -15, 14, 21, -25, 4, -49, 50, 2, -44, 14, 22, 1, 30, 36, -17, 6, -3, 31, -7, -12, 5, -7, 40, -11, 15, -47, -15, -5, 11, 10, 12, 19, -68, -34, -54, -20, 35, -34, -17, -24, -35, 22, -67, 7, -37, 10, -8, 31, -52, 40, 57, -5, 42, 0, 29, 15, 0, -20, -38, -6, -18, -28, 37, -30, 40, 0, -11, 8, 18, 36, 11, 35, 40, -6, 37, -29, -6, 1, -13, 22, -2, 18, 23, -5, 19, -42, 17, 12, -93, -79, -65, 14, -2, 16, 28, -46, -59, -51, -29, -95, -29, -6, -57, -7, -12, -3, 7, -35, -36, 26, 54, 43, -39, 57, 37, 18, 49, 21, 2, 28, 39, 41, 0, 56, 24, -5, -24, -35, 17, 29, 29, 11, -8, 38, 35, 0, 36, -36, 1, -27, 7, 1, 15, 5, 3, -11, -11, 24, 14, -44, 24, 32, -29, -35, -24, 14, -2, 39, -3, -13, -28, -61, -8, -30, -9, -18, -52, -17, -41, -66, -32, 25, -21, 21, 52, 44, -57, -6, 60, -25, 57, 24, 15, 9, 12, -21, -28, 41, -27, 3, -2, -21, 15, -6, 53, 2, 15, 10, 0, -7, -7, 8, 35, 4, -3, 30, 22, -4, -16, -21, 21, 11, 15, -6, -4, 18, -3, -63, -44, 11, 18, -10, 0, 23, -52, -77, 9, 4, -19, -12, -69, -51, 0, -85, -11, 6, -55, 5, -7, -4, -50, 22, 35, -30, 18, 9, -5, 24, -14, -19, -30, 25, -32, 2, 24, -14, 1, -29, -16, -37, 16, -25, 5, 10, -53, 21, -14, 6, 9, 7, -40, 16, -20, -8, 11, -17, 10, -4, 21, -22, -7, -29, -39, 31, -26, 7, 19, 14, -45, -9, -7, -55, -18, -12, -59, -46, -5, 64, -21, 22, -44, 66, 11, 41, -33, 54, 37, -12, 59, -8, -2, -12, 37, 34, -17, 27, -10, -10, 36, 18, 21, 6, 15, 1, 18, 36, 27, 22, 37, -6, -5, -4, 8, -4, -5, 27, -1, -3, 21, 32, -2, -33, 16, 1, -34, -54, -16, 27, 11, -22, -28, -18, -41, -12, -16, -79, 26, -45, -26, 0, -13, -5, 22, 57, -29, -5, 25, 18, 3, 27, 16, -34, 27, 10, -12, -37, 36, -8, 5, 25, 4, -4, -33, -48, 23, 5, 25, 13, -17, 20, -4, 24, 19, 31, 1, -4, -7, 4, -7, 12, -37, -26, 14, 34, -12, -9, -4, 6, -38, -40, -21, 0, 20, 36, 1, -14, -60, -25, -20, -17, -10, -19, -46, -37, 10, -84, 1, 30, -45, 10, -7, 17, -24, -2, -5, -50, 8, 1, -19, -32, -31, -28, -29, -13, -22, 5, -4, -35, 57, 6, -38, 19, -26, -1, -3, 10, 15, -5, 20, -3, 32, 28, 8, 16, -33, -32, 23, -21, 9, -29, -24, -18, 14, -22, -20, 24, 5, 7, -3, 25, -64, -52, -16, -32, 12, -1, -62, -12, -17, -4, -50, 39, -59, 11, 6, 50, -46, -22, 55, -25, -7, 9, 0, 11, -27, -16, -13, 5, -34, -31, 24, -6, 3, -29, 29, -33, -1, 10, 0, -1, 47, -19, 31, 12, -16, 45, -8, -4, -62, -13, 26, -9, -14, 15, 14, 36, -9, -52, -33, 18, -31, -12, 58, 28, -2, -49, -19, -77, 14, -4, -64, 13, -11, -81, -31, 26, -102, 41, 5, 23, -10, 34, 50, -26, 48, 13, -49, 11, -18, -5, -38, 48, -7, -30, -7, -4, 3, -10, -21, 22, 26, 15, -18, -21, 21, -6, 38, -25, -5, 10, -18, 8, -28, -5, -8, -20, -15, -23, -40, 6, -47, -11, -72, 3, 4, 29, -4, 4, 5, 13, -35, -62, 28, 37, -31, -34, 37, -23, 20, -14, -29, 33, -32, 30, -12, 46, 14, -31, 35, -12, 44, 8, 25, -6, -10, 6, -20, 5, -33, -38, 40, 1, -13, 9, -8, -20, 31, 21, 3, 14, 24, -4, 17, 9, 34, 19, -36, -49, 7, 45, -1, -5, -29, 3, -31, -38, -44, 24, 4, 26, 34, 8, -12, -113, 6, -15, -9, 11, -18, -2, 5, -6, -21, 42, -29, -21, 22, -14, -7, -6, 7, -36, 5, -6, -33, -33, 3, -15, -39, -33, -9, -15, 5, -25, -12, 4, -9, 10, 2, -1, -13, 12, 26, 39, 54, 23, 4, -6, -42, 30, -44, 14, 17, -19, -12, -27, -15, -38, -24, -46, -62, -32, -5, 14, 19, 9, 6, -24, -48, -15, -9, -21, -42, -28, -9, -7, -8, 18, -69, 8, -3, -16, -58, 8, -30, -16, -6, -29, -16, 38, -81, -9, -23, 9, -8, -4, -33, -30, -9, 22, -9, 1, 0, -40, 30, -55, 7, -18, 33, -26, -19, -5, -2, 20, -38, -21, 40, 7, 29, -32, 1, 13, -54, -43, -54, 21, -31, 22, 92, 14, -33, 55, -43, -33, 2, 38, -20, -7, -28, 66, -18, 75, -66, 
};
const TfArray<2, int> tensor_dimension4 = { 2, { 2,2432 } };
const TfArray<1, float> quant4_scale = { 1, { 0.0021865286398679018, } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&g0::quant3_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data5[16] = { -3363, -5101, -2998, 422, 1487, -3506, 891, -2792, -1868, -935, -3100, -1623, -1043, 88, -3469, -1103, };
const TfArray<1, int> tensor_dimension5 = { 1, { 16 } };
const TfArray<16, float> quant5_scale = { 16, { 2.4779810701147653e-05, 2.1126936189830303e-05, 4.0587769035482779e-05, 3.0208981115720235e-05, 3.1103034416446462e-05, 2.223603951279074e-05, 3.6263296351535246e-05, 2.4304014004883356e-05, 2.9974948120070621e-05, 2.8705371732939966e-05, 2.402778591203969e-05, 2.3603681256645359e-05, 2.526136813685298e-05, 4.2528259655227885e-05, 2.5454626666032709e-05, 2.4133734768838622e-05, } };
const TfArray<16, int> quant5_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data6[16*3*3*8] = { 
  /* [0][0][][] */ 29,91,48,127,-29,27,23,3, -19,1,-33,-51,-43,-29,34,-88, 2,-14,-17,17,-35,-54,25,-40, 
  /* [0][1][][] */ 14,38,56,96,28,13,18,-46, -59,-24,-57,-7,-48,1,7,-123, -4,14,38,-15,74,51,0,-55, 
  /* [0][2][][] */ -34,30,-58,49,-50,47,64,24, -27,55,-73,-8,-81,-5,-73,-61, 30,4,17,3,31,-11,30,-15, 
  /* [1][0][][] */ -70,30,-46,117,-8,-8,-26,-33, 5,-6,-49,38,113,74,53,100, 31,-53,-45,-59,-113,-39,-11,-32, 
  /* [1][1][][] */ -23,56,54,19,-12,-51,43,-89, -4,116,38,-10,48,127,-15,-65, 3,-70,-36,-48,-33,39,-127,13, 
  /* [1][2][][] */ 14,-46,80,-110,87,51,-1,-124, -48,-21,-50,16,7,67,-35,-89, -54,-88,-15,42,-9,-83,-93,-29, 
  /* [2][0][][] */ -80,6,-64,15,-12,-35,-32,-4, 5,50,37,60,47,-35,28,35, -39,9,11,-1,16,-16,-7,-22, 
  /* [2][1][][] */ -38,44,-40,15,-31,28,17,-8, 7,127,-3,-5,15,-16,-19,-12, -33,-53,-8,-21,43,-8,-63,-21, 
  /* [2][2][][] */ -41,40,-42,27,-52,72,-27,-20, -8,83,14,35,8,2,22,-35, -27,-35,-30,-1,-1,-40,-48,-35, 
  /* [3][0][][] */ 44,-71,29,-71,42,-66,-42,-39, -50,-24,-51,10,-19,-63,-75,80, -27,-21,10,-34,-3,-68,-2,21, 
  /* [3][1][][] */ 57,-57,23,-62,23,-81,-53,-103, -95,-28,-96,-30,-96,-23,-47,84, -25,3,67,5,-36,-56,-1,51, 
  /* [3][2][][] */ 46,26,49,-49,68,-73,-34,-106, -127,-48,-54,-26,-99,-52,-32,69, -45,3,23,-34,5,-44,-16,45, 
  /* [4][0][][] */ -39,-68,-77,-25,-53,-25,58,-33, -71,-53,-56,-10,-88,63,66,-8, -8,28,-3,-20,-43,83,-3,8, 
  /* [4][1][][] */ -53,-38,-91,6,1,59,-41,-42, -52,55,-81,22,-99,112,-92,36, -25,-26,-22,3,14,46,6,23, 
  /* [4][2][][] */ -67,-28,-95,35,-46,22,55,-81, -95,20,-91,9,-127,-5,67,83, -30,28,-52,-12,7,8,5,79, 
  /* [5][0][][] */ -80,49,-47,55,-79,-66,-43,62, -68,89,-77,25,-35,123,-61,-10, -50,54,-23,8,-39,62,-67,15, 
  /* [5][1][][] */ -98,50,-109,-33,-40,-10,-2,-58, -73,20,-53,61,-34,92,120,67, -35,48,-63,19,-76,57,45,16, 
  /* [5][2][][] */ -65,10,-97,59,-127,72,-47,-43, -7,37,-68,56,-20,-66,42,-40, 0,-4,-67,25,-52,95,-39,-41, 
  /* [6][0][][] */ 14,-2,-19,-2,-52,-16,12,92, 22,-73,31,-97,-4,-22,2,15, -69,-8,-57,47,-49,33,-21,-16, 
  /* [6][1][][] */ -30,-74,15,-58,-65,0,-24,0, 56,-51,6,-127,16,-15,11,7, -43,37,-5,-23,-59,12,43,55, 
  /* [6][2][][] */ 55,-112,9,-63,-67,12,0,-27, 42,-37,1,-109,27,-3,-46,74, -37,7,13,49,-52,-23,-1,-35, 
  /* [7][0][][] */ -30,19,-72,-115,-88,127,64,-18, -6,60,-6,99,4,80,50,25, -8,-5,-44,-35,20,51,91,8, 
  /* [7][1][][] */ -39,39,-57,-94,-18,-21,23,-30, -39,81,-34,94,-69,73,44,-2, -66,-35,-32,-13,-65,-37,-18,3, 
  /* [7][2][][] */ -64,-82,-53,58,-55,-31,-43,-23, -45,-14,-59,84,-2,50,-44,-6, -39,-7,-10,-6,-84,49,59,11, 
  /* [8][0][][] */ 54,-41,69,1,44,-64,31,25, -18,-27,-84,-28,58,-73,-94,9, -41,-31,28,31,11,22,-40,13, 
  /* [8][1][][] */ 31,-73,85,-16,-1,-114,-4,-34, -13,-2,-21,-9,14,-50,-72,-8, -70,-77,-55,-14,-18,9,25,36, 
  /* [8][2][][] */ 3,-26,53,-35,51,-23,-6,-18, 38,-56,25,-54,32,-127,-75,-36, 8,-5,-63,-2,-9,-53,17,-43, 
  /* [9][0][][] */ -9,-16,-44,28,-37,54,113,23, -67,-87,-41,-48,-70,12,50,50, -63,-57,-40,19,-36,51,-36,55, 
  /* [9][1][][] */ -24,63,-50,-29,-71,45,-38,29, -56,-33,-4,-37,-49,4,-55,-35, -49,20,-33,36,-21,70,35,12, 
  /* [9][2][][] */ -93,39,-97,-22,-62,-18,-60,26, -54,-43,-15,12,-54,17,-51,84, -17,2,-64,2,13,127,-17,-3, 
  /* [10][0][][] */ -99,-19,-104,55,-61,-65,-19,-20, -98,-39,-55,13,-93,-65,-40,78, -100,-27,-65,36,-79,79,-25,106, 
  /* [10][1][][] */ -34,-12,-41,31,-40,85,62,40, 1,-82,-13,-72,-44,2,112,43, -32,24,-62,-47,-28,3,-5,-23, 
  /* [10][2][][] */ 59,1,21,9,42,-25,127,-26, -15,10,28,-12,-12,106,-13,-89, -17,-19,-53,-18,-42,26,86,-110, 
  /* [11][0][][] */ -38,32,-7,51,72,-58,-65,-68, 29,-1,-20,-7,54,-120,-72,-31, -92,-36,-34,47,-119,-13,-87,41, 
  /* [11][1][][] */ 113,110,34,17,76,-113,-27,-107, -42,-19,-46,7,-45,-61,-40,-75, -71,-16,-88,-4,-123,4,2,26, 
  /* [11][2][][] */ -27,-18,13,22,51,-50,-69,-50, 29,-13,1,0,-14,-61,-105,-127, -106,-87,-76,-4,-121,13,87,66, 
  /* [12][0][][] */ -45,77,-87,106,10,14,-14,-75, 4,-22,-43,-36,-23,-49,-82,58, 61,-19,56,-5,9,-103,1,-1, 
  /* [12][1][][] */ -31,-11,-40,-49,83,7,-43,-115, -18,-40,-30,-29,-19,-80,-37,88, 25,-10,54,-13,15,-92,-17,19, 
  /* [12][2][][] */ -9,-12,-50,-46,93,-49,-102,-127, -114,-104,-56,-18,-52,-24,-101,51, 64,-1,24,-28,29,-113,-53,-19, 
  /* [13][0][][] */ -10,8,-29,-26,3,-7,-18,-112, -56,-2,-56,1,-55,-45,-60,40, 12,1,25,-28,11,-81,-52,45, 
  /* [13][1][][] */ 8,40,-21,-3,94,-14,-32,-127, -54,-2,-63,-31,-46,54,15,49, -13,-56,6,-27,-16,-43,-4,55, 
  /* [13][2][][] */ -3,39,-27,25,21,-25,-68,-95, -4,1,-34,10,-12,-22,-79,14, -1,9,15,7,-19,-73,-17,46, 
  /* [14][0][][] */ 18,28,45,-46,6,51,-7,-100, -15,127,21,89,-17,-13,3,-100, 56,-72,-7,34,31,-29,-36,-95, 
  /* [14][1][][] */ -34,-13,-62,-86,-50,115,-36,-52, 14,124,22,72,35,69,16,19, -11,29,-59,-40,54,8,-120,6, 
  /* [14][2][][] */ -65,45,-70,-5,-35,50,-56,-61, -41,-33,-5,6,81,-64,-20,37, -20,-41,-55,-67,-1,-25,3,-43, 
  /* [15][0][][] */ 75,27,-4,-68,31,-65,-96,68, 3,-42,9,-42,-7,-82,-11,46, -67,-54,21,-33,-76,1,27,-4, 
  /* [15][1][][] */ 64,-85,28,-112,1,-38,-34,7, -17,-56,62,-20,-36,-26,-29,127, 60,-21,30,-53,29,-16,-24,-107, 
  /* [15][2][][] */ 29,-75,-67,-91,2,-127,-9,73, -56,-95,24,-4,-58,-61,-44,89, 58,21,61,-28,-20,-29,-24,28, 
};
const TfArray<4, int> tensor_dimension6 = { 4, { 16,3,3,8 } };
const TfArray<16, float> quant6_scale = { 16, { 0.0020635470282286406, 0.0017593526281416416, 0.0033799600787460804, 0.0025156629271805286, 0.0025901156477630138, 0.001851713634096086, 0.0030198381282389164, 0.0020239248406141996, 0.0024961738381534815, 0.0023904494009912014, 0.0020009218715131283, 0.0019656044896692038, 0.0021036488469690084, 0.0035415550228208303, 0.0021197425667196512, 0.002009744755923748, } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&g0::quant5_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data7[8] = { -1523, -1454, -1784, -1261, -1976, -1858, -2043, -3574, };
const TfArray<1, int> tensor_dimension7 = { 1, { 8 } };
const TfArray<8, float> quant7_scale = { 8, { 7.4334660894237459e-05, 0.00013229403703007847, 9.0165936853736639e-05, 0.00012660281208809465, 9.2979214969091117e-05, 7.5752177508547902e-05, 8.6718944658059627e-05, 8.6273379565682262e-05, } };
const TfArray<8, int> quant7_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data8[8*3*3*1] = { 
  /* [0][0][][] */ 6, -70, -55, 
  /* [0][1][][] */ 48, -127, -103, 
  /* [0][2][][] */ 67, -55, -124, 
  /* [1][0][][] */ 10, -76, 19, 
  /* [1][1][][] */ 62, -64, 28, 
  /* [1][2][][] */ -87, 127, -42, 
  /* [2][0][][] */ 38, 28, -127, 
  /* [2][1][][] */ 55, -37, -89, 
  /* [2][2][][] */ 68, -34, -102, 
  /* [3][0][][] */ -57, 36, -14, 
  /* [3][1][][] */ -71, 79, -31, 
  /* [3][2][][] */ 127, -73, 24, 
  /* [4][0][][] */ 69, -127, 41, 
  /* [4][1][][] */ 61, -120, 12, 
  /* [4][2][][] */ 23, -56, -4, 
  /* [5][0][][] */ -71, -34, -18, 
  /* [5][1][][] */ 127, 109, 18, 
  /* [5][2][][] */ -78, -77, 0, 
  /* [6][0][][] */ 38, 127, 37, 
  /* [6][1][][] */ 59, -17, -43, 
  /* [6][2][][] */ -78, -117, -52, 
  /* [7][0][][] */ 85, 68, 48, 
  /* [7][1][][] */ 127, 107, 74, 
  /* [7][2][][] */ 66, 95, 34, 
};
const TfArray<4, int> tensor_dimension8 = { 4, { 8,3,3,1 } };
const TfArray<8, float> quant8_scale = { 8, { 0.001651157857850194, 0.0029385797679424286, 0.0020028098952025175, 0.0028121634386479855, 0.0020652997773140669, 0.0016826443606987596, 0.0019262435380369425, 0.0019163464894518256, } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&g0::quant7_zero, 0 };
const TfArray<4, int> tensor_dimension9 = { 4, { 1,150,13,1 } };
const TfArray<4, int> tensor_dimension10 = { 4, { 1,150,13,8 } };
const TfArray<1, float> quant10_scale = { 1, { 0.012008357793092728, } };
const TfArray<1, int> quant10_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const TfArray<4, int> tensor_dimension11 = { 4, { 1,75,7,8 } };
const TfArray<4, int> tensor_dimension12 = { 4, { 1,75,7,16 } };
const TfArray<1, float> quant12_scale = { 1, { 0.008338097482919693, } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&g0::quant10_zero, 0 };
const TfArray<4, int> tensor_dimension13 = { 4, { 1,38,4,16 } };
const TfArray<2, int> tensor_dimension14 = { 2, { 1,2432 } };
const TfArray<2, int> tensor_dimension15 = { 2, { 1,2 } };
const TfArray<1, float> quant15_scale = { 1, { 0.043894406408071518, } };
const TfArray<1, int> quant15_zero = { 1, { -3 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<1, float> quant16_scale = { 1, { 0.00390625, } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&g0::quant10_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,1 } };
const TfArray<1, int> outputs0 = { 1, { 9 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 9,8,7 } };
const TfArray<1, int> outputs1 = { 1, { 10 } };
const TfLitePoolParams opdata2 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs2 = { 1, { 10 } };
const TfArray<1, int> outputs2 = { 1, { 11 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 11,6,5 } };
const TfArray<1, int> outputs3 = { 1, { 12 } };
const TfLitePoolParams opdata4 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs4 = { 1, { 12 } };
const TfArray<1, int> outputs4 = { 1, { 13 } };
const TfLiteReshapeParams opdata5 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs5 = { 2, { 13,2 } };
const TfArray<1, int> outputs5 = { 1, { 14 } };
const TfLiteFullyConnectedParams opdata6 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs6 = { 3, { 14,4,3 } };
const TfArray<1, int> outputs6 = { 1, { 15 } };
const TfLiteSoftmaxParams opdata7 = { 1 };
const TfArray<1, int> inputs7 = { 1, { 15 } };
const TfArray<1, int> outputs7 = { 1, { 16 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 1950, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 8, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension2, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 4864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 15600), (TfLiteIntArray*)&g0::tensor_dimension9, 1950, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension10, 15600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 15600), (TfLiteIntArray*)&g0::tensor_dimension11, 4200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension12, 8400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 8400), (TfLiteIntArray*)&g0::tensor_dimension13, 2432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension14, 2432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 2432), (TfLiteIntArray*)&g0::tensor_dimension15, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension15, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[8] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[8] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_CONV_2D, OP_MAX_POOL_2D, OP_RESHAPE, OP_FULLY_CONNECTED, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 17, };
const size_t tflNodes_subgraph_index[] = {0, 8, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  16, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_5_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 17;
  for (size_t i = 0; i < 17; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_invoke() {
  for (size_t i = 0; i < 8; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
